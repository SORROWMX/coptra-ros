<launch>
    <!-- Camera setup configuration -->

    <arg name="direction_z" default="down"/> <!-- direction the camera points: down, up -->
    <arg name="direction_y" default="backward"/> <!-- direction the camera cable points: backward, forward -->
    <arg name="device" default="/dev/video0"/> <!-- v4l2 device -->
    <arg name="throttled_topic" default="false"/> <!-- enable throttled image topic -->
    <arg name="throttled_topic_rate" default="5.0"/> <!-- throttled image topic rate -->
    <arg name="rectify" default="false"/> <!-- enable rectification -->
    <node if="$(eval direction_z == 'down' and direction_y == 'backward')" pkg="tf2_ros" type="static_transform_publisher" name="main_camera_frame" args="0.05 0 -0.07 -1.5707963 0 3.1415926 base_link main_camera_optical"/>
    <node if="$(eval direction_z == 'down' and direction_y == 'forward')" pkg="tf2_ros" type="static_transform_publisher" name="main_camera_frame" args="0.05 0 -0.07 1.5707963 0 3.1415926 base_link main_camera_optical"/>
    <node if="$(eval direction_z == 'up' and direction_y == 'backward')" pkg="tf2_ros" type="static_transform_publisher" name="main_camera_frame" args="0.05 0 0.07 1.5707963 0 0 base_link main_camera_optical"/>
    <node if="$(eval direction_z == 'up' and direction_y == 'forward')" pkg="tf2_ros" type="static_transform_publisher" name="main_camera_frame" args="0.05 0 0.07 -1.5707963 0 0 base_link main_camera_optical"/>
    <node if="$(eval direction_z == 'forward')" pkg="tf2_ros" type="static_transform_publisher" name="main_camera_frame" args="0.03 0 0.05 -1.5707963 0 -1.5707963 base_link main_camera_optical"/>
    <node if="$(eval direction_z == 'backward')" pkg="tf2_ros" type="static_transform_publisher" name="main_camera_frame" args="-0.03 0 0.05 1.5707963 0 -1.5707963 base_link main_camera_optical"/>

    <!-- Template for custom camera orientation -->
    <!-- Camera position and orientation are represented by base_link -> main_camera_optical transform -->
    <!-- static_transform_publisher arguments: x y z yaw pitch roll frame_id child_frame_id -->
    <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="main_camera_frame" args="0.05 0 -0.07 -1.5707963 0 3.1415926 base_link main_camera_optical"/> -->

    <!-- RTSP camera node -->
    <node pkg="coptra" type="ros_rtsp_camera.py" name="main_camera" respawn="true" output="screen">
        <param name="frame_id" value="main_camera_optical"/>
        <param name="camera_info_url" value="file://$(find coptra)/camera_info/fisheye_cam.yaml"/>
        <remap from="/camera/image_raw" to="/main_camera/image_raw"/>
        <remap from="/camera/camera_info" to="/main_camera/camera_info"/>
    </node>

    <!-- camera visualization markers -->
    <node pkg="coptra" type="camera_markers" ns="main_camera" name="main_camera_markers">
        <param name="scale" value="3.0"/>
    </node>

    <!-- image topic throttled -->
    <node pkg="topic_tools" name="main_camera_throttle" type="throttle" ns="main_camera"
        args="messages image_raw $(arg throttled_topic_rate) image_raw_throttled" if="$(arg throttled_topic)"/>

    <!-- nodelet manager for image processing -->
    <node pkg="nodelet" type="nodelet" name="main_camera_nodelet_manager" args="manager" if="$(arg rectify)"/>

    <!-- rectified image topic -->
    <node pkg="nodelet" type="nodelet" name="main_camera_image_proc" args="load image_proc/rectify main_camera_nodelet_manager" if="$(arg rectify)">
        <remap from="image_raw" to="main_camera/image_raw"/>
        <remap from="camera_info" to="main_camera/camera_info"/>
        <remap from="image_rect" to="main_camera/image_rect"/>
    </node>
</launch>